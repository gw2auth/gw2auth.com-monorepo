name: 'Create PR for submodule'

on:
  workflow_dispatch:
    inputs:
      submodule:
        description: 'Submodule to create a PR for'
        required: true
        type: choice
        options:
          - 'gw2auth.com-api'
          - 'gw2auth.com-cdk'
          - 'gw2auth.com-ui'
          - 'opentelemetry-lambda'
      submodule_ref:
        description: 'Ref of the submodule to create a PR for'
        required: true
        type: string

jobs:
  create_pr_branch:
    name: 'Prepare PR branch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          ref: 'beta'
          ssh-key: ${{ secrets.CDK_SSH_KEY }}
          submodules: true
      - name: 'Checkout PR branch'
        run: 'git checkout -b "pr/${{ inputs.submodule }}/${{ inputs.submodule_ref }}" && git reset --hard origin/beta'
      - name: 'Update submodule ref'
        working-directory: ${{ inputs.submodule }}
        run: 'git fetch origin "${{ inputs.submodule_ref }}" && git checkout "${{ inputs.submodule_ref }}"'
      - name: 'Commit changes'
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git add ${{ inputs.submodule }}
          git commit -m "update ${{ inputs.submodule }} to ${{ inputs.submodule_ref }}"
      - name: 'Push PR branch'
        run: 'git push --force "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" "pr/${{ inputs.submodule }}/${{ inputs.submodule_ref }}"'

  create_pr:
    name: 'Create PR'
    runs-on: ubuntu-latest
    needs:
      - create_pr_branch
    permissions:
      pull-requests: write
    steps:
      - name: 'Create PR'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const head = 'pr/${{ inputs.submodule }}/${{ inputs.submodule_ref }}';
            const base = 'beta';
            const pulls = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              head: `${owner}:${head}`,
              base: base,
              state: 'open',
            });
            
            if (pulls.data.length < 1) {
              await github.rest.pulls.create({
                title: `[CI] Merge ${head} into beta`,
                owner: owner,
                repo: repo,
                head: head,
                base: base,
                body: [
                  'This PR is auto-generated by',
                  '[actions/github-script](https://github.com/actions/github-script)',
                ].join('\n'),
              });
            } else {
              const existingPR = pulls.data[0];
              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: existingPR.number,
                body: [
                  `Updated by Job ${context.job}`,
                ].join('\n'),
              });
            }